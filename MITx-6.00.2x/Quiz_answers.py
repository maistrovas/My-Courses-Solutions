'''
Problem_1

1.The following function is stochastic:
def f(x):
    # x is an integer
    return int(x + random.choice([0.25, 0.5, 0.75]))
- False

2.In Python, we can use random.seed(100) at the beginning 
of a program to generate the same sequence of random numbers 
each time we run a program.
-True

3.Let h be a hash function. If x != y, then h(x) will always 
be unequal to h(y).
-False

4.You roll an unfair (weighted) die. The distribution of the 
numbers rolled is a uniform distribution.
-False

5.Consider deriving the probability of a coin flip coming up 
heads by running m trials of 100 flips each. If the coin is 
fair, the mean probability of the m trials will go to 0.5 as 
m goes to infinity.
-True

'''





'''
Problem_2

1.Consider two normal distributions, A and B. The standard 
deviation of A is 3 and the standard deviation of B is 5. 
For each distribution, 1,000 observations are drawn and plotted 
in a histogram with 10 bins, creating one histogram for each 
distribution.
-Any of the above are possible

2.What is the exact probability of rolling at least two 6's 
when rolling a die three times?
-2/27

3.A simulation
-All of the above All of the above

4.Suppose you insert 100*N random numbers generated by 
random.randint(0, 99) in a hash table with 10 buckets 
whose hash function is h(x) = x % 10. Select the most 
accurate statement.
-As N goes to infinity, the number of 
 items in the buckets will have a uniform 
 distribution across all buckets.

'''





'''
Problem_3

Consider the following code:

import random, pylab
xVals = []
yVals = []
wVals = []
for i in range(1000):
    xVals.append(random.random())
    yVals.append(random.random())
    wVals.append(random.random())
xVals = pylab.array(xVals)
yVals = pylab.array(yVals)
wVals = pylab.array(wVals)
xVals = xVals + xVals
zVals = xVals + yVals
tVals = xVals + yVals + wVals
For each of the following questions, select the best answer from the set of choices.

1.The values in tVals are most closely:
-Distributed with a Gaussian distribution 

2.The values in xVals are most closely:
-Uniformly distributed

For each of the following expressions using 
the code above, match the following calls to 
pylab.plot with one of the graphs shown below.

3.
-Graph5

4.
- Graph4

5.
-Graph3

6.
-Graph2

7.
-Graph1

'''





'''
Problem_4

Suppose we use a Monte Carlo simulation to simulate a random 
walk of a class of drunk, returning a collection of actual 
distances from the origin for a set of trials.

Each graph below was generated by using one of the above 
five classes of a drunk (UsualDrunk, ColdDrunk, EDrunk, 
PhotoDrunk, or DDrunk). For each graph, indicate which 
Drunk class is mostly likely to have resulted in that 
distribution of distances. Click on each image to see a larger view.

1.
-UsualDrunk

2.
-PhotoDrunk

3.
-ColdDrunk

4.
-DDrunk

5.
-EDrunk

'''





'''
Problem_5

1.
-1/7

2.
'''
def trial():
    balls = ['r', 'r', 'r', 'r', 'g', 'g', 'g', 'g']
    choseBalls = []
    for i in range (3):
        ball = random.choice(balls)
        balls.remove(ball)
        choseBalls.append(ball)
    if choseBalls[0] == choseBalls[1] and choseBalls[1] == choseBalls[2]:
        return True
    return False

def drawing_without_replacement_sim(numTrials):
    true = 0
    for i in range(numTrials):
        if trial():
            true +=1
    return float(true)/ float(numTrials)




'''
Problem_6

1.Write a function called makeHistogram(values, 
numBins, xLabel, yLabel, title=None)

2.Write a function called getAverage(die, numRolls, numTrials)

'''
#1
def makeHistogram(values, numBins, xLabel, yLabel, title=None):
    """
      - values, a list of numbers
      - numBins, a positive int
      - xLabel, yLabel, title, are strings
      - Produces a histogram of values with numBins bins and the indicated labels
        for the x and y axes
      - If title is provided by caller, puts that title on the figure and otherwise
        does not title the figure
    """
    pylab.hist(values, numBins)
    if title != None:
        pylab.title(title)
    pylab.xlabel(xLabel)
    pylab.ylabel(yLabel)
    pylab.show()



#2 Passes only 3 out of 5 tests.
def getMeanAndStd(X):
    mean = sum(X)/float(len(X))
    tot = 0.0
    for x in X:
        tot += (x - mean)**2
    std = (tot/len(X))**0.5
    return mean, std

class Die(object):
    def __init__(self, valList):
        """ valList is not empty """
        self.possibleVals = valList[:]
    def roll(self):
        return random.choice(self.possibleVals)

def getAverage(die, numRolls, numTrials):
    """
      - die, a Die
      - numRolls, numTrials, are positive ints
      - Calculates the expected mean value of the longest run of a number
        over numTrials runs of numRolls rolls
      - Calls makeHistogram to produce a histogram of the longest runs for all
        the trials. There should be 10 bins in the histogram
      - Choose appropriate labels for the x and y axes.
      - Returns the mean calculated
    """
    bean = 10
    xlabel = 'R'
    ylabel = 'T'
    title = 'Histogramm'
    list_rols = []
    rolls = []
    longest_runs = []
    for trial in range(numTrials):
        for i in range(numRolls):
            rolls.append(die.roll())
            if i == numRolls-1:
                list_rols.append(rolls)
                longest_runs.append(len(rolls))
                rolls = []
    makeHistogram(longest_runs, bean, xlabel, ylabel, title)
    mean, std = getMeanAndStd(longest_runs)
    return mean



